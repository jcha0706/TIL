%추상 클래스와 인터페이스를 사용하는 이유:
자식 클래스들이 "무조건" 추상클래스나 인터페이스 내에 있는
추상 메서드를 사용하게끔 하기 위해

abstract
-추상메서드를 생성할 수 있는 클래스
-추상클래스는 클래스와는 다르게 인스턴스 생성 불가; 자식 클래스에서 상속 받은후
생성 해야함.
-추상메서드: 설계만 되어있고 구연채(body)가 없음 -> 자식클래스에서 구연
abstract class Bird{
    private int x,y,z;
    void fly(int x, int y, int z){
        printLocation();
        System.out.println("moving");
        this.x = x;
        this.y = y;
        if(flyable(z)){
            this.z = z;
        } else{
            System.out.println("cannot fly that high");
        }
        printLocation();
    }
    abstract boolean flyable(int z);

    public void printLocation(){
        System.out.println("current location: " +
                x + ", " + y + ", " + z);
    }
}
class Pigeon extends Bird{

    @Override
    boolean flyable(int z) {
        return z <= 10000;
    }
}


interface
-객체 특정 행동의 특징을 정의
-맴버를 가지지 못하고 메서드만 정의 구현은 implements 한 클래스에서
-여러개를 한 클래스에 상속가능 (다중상속)
-인터페이스를 구현하는 클래스는 인터페이스에 존재하는 함수의 내용을
반드시 구현 해야 함
interface Flyable{
    void fly(int x, int y, int z);
}


Abstract classes should be used primarily for objects that are closely related,
whereas interefaces are best suited for providing a common functionality to
unrelated classes.